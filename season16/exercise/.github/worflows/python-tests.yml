name: Python Multi-Version Tests

# Trigger the workflow on push or pull request events
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  # Allow manual triggering
  workflow_dispatch:

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    # Define the matrix strategy for multiple Python versions and OS platforms
    strategy:
      fail-fast: false  # Don't fail the entire matrix if one version fails
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        os: [ubuntu-latest, windows-latest]
        # Optionally exclude specific combinations if needed
        # exclude:
        #   - os: windows-latest
        #     python-version: '3.7'

    steps:
    # Check out the repository code
    - uses: actions/checkout@v3
    
    # Set up Python with the specified version from matrix
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'  # Caching pip dependencies
    
    # Display Python version for verification
    - name: Display Python version
      run: python -c "import sys; print(f'Python {sys.version}')"
    
    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash
    
    # Lint the code with flake8
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    # Run tests with pytest and generate coverage report
    - name: Test with pytest
      run: |
        pytest --cov=./ --cov-report=xml
    
    # Upload coverage report to Codecov (optional)
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  # Optional job to build and deploy if all tests pass
  build:
    name: Build and Package
    needs: test  # Only run if tests pass
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'  # Use a specific version for builds
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    # Archive the built packages as artifacts
    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: |
          dist/
          README.md